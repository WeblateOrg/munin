#!/usr/bin/env python3

import json
import os
import sys
import urllib.request


def fetch_data(server, token):
    req = urllib.request.Request('{}api/metrics/'.format(server))
    req.add_header('Authorization', 'Token {}'.format(token))
    with urllib.request.urlopen(req) as response:
       content = response.read().decode('utf-8')
    return json.loads(content)

NAME = os.path.basename(sys.argv[0])

try:
    CMD = sys.argv[1]
except IndexError:
    CMD = 'fetch'

WARNINGS = {
    'index_updates': ':5000',
}
CRITICALS = {
    'index_updates': ':10000',
}
GROUPS = (
    (
        'Units',
        ('units', 'units_translated', 'checks', 'suggestions')
    ),
    (
        'Projects',
        ('projects', 'components', 'languages')
    ),
    (
        'Translations',
        ('translations',)
    ),
    (
        'Changes',
        ('index_updates', 'changes')
    ),
    (
        'Users',
        ('users',)
    )
)

server = os.environ['SERVER']
key = os.environ['KEY']

data = fetch_data(server, key)

if CMD == 'config':
    for group, items in GROUPS:
        print()
        print('multigraph {}_{}'.format(NAME.lower(), group.lower()))
        print()
        print('graph_title {} {}'.format(data['name'], group))
        print('graph_args --base 1000')
        print('graph_scale no')
        print('graph_category weblate')
        print()
        for key in items:
            print('{0}.label {0}'.format(key))
            if key in WARNINGS:
                print('{0}.warning {1}'.format(key, WARNINGS[key]))
            if key in CRITICALS:
                print('{0}.critical {1}'.format(key, CRITICALS[key]))
else:
    for group, items in GROUPS:
        print()
        print('multigraph {}_{}'.format(NAME.lower(), group.lower()))
        print()
        for key in items:
            print('{}.value {}'.format(key, data[key]))
